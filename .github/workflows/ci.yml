name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  lint:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Install clang-format 19
      run: sudo apt-get update -q
        && sudo apt-get install clang-format-19 -y -q

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-19 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v5
      with:
        file: build/coverage/coverage.info
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: LineGM/ini_manager

  sanitize:
    needs: [lint]

    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install Clang
      run: sudo apt-get update -q
        && sudo apt-get install clang-tools-19 -q -y

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1:\
          halt_on_error=1"
        UBSAN_OPTIONS: "print_stacktrace=1:\
          halt_on_error=1"
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-15, ubuntu-24.04, windows-2025]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-24.04'
      run: >-
        sudo apt-get update -q
        && sudo apt-get install clang-tools-19 clang-tidy-19 cppcheck -y -q

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2025'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake --preset=ci-$("${{ matrix.os }}".split("-")[0])

    - name: Build
      run: cmake --build build/ --config Release -j 2

    - name: Install
      run: cmake --install build/ --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-24.04

    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'LineGM'

    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen graphviz -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake; cat docs/Doxyfile

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/html
